;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;
.pio_version 0 ; only requires PIO version 0

.program ws2812
.side_set 1

; The following constants are selected for broad compatibility with WS2812,
; WS2812B, and SK6812 LEDs. Other constants may support higher bandwidths for
; specific LEDs, such as (7,10,8) for WS2812B LEDs.

.define public T1 3
.define public T2 3
.define public T3 4

; These Python language options are for MicroPython usage and are typically
; ignored by pioasm when generating C-SDK headers.
; .lang_opt python sideset_init = pico.PIO.OUT_HIGH
; .lang_opt python out_init     = pico.PIO.OUT_HIGH
; .lang_opt python out_shiftdir = 1

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero side 1 [T1 - 1] ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp  bitloop   side 1 [T2 - 1] ; Continue driving high, for a long pulse
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse
.wrap

% c-sdk {
// This C-SDK block is processed by pioasm to generate functions in ws2812.pio.h
#include "hardware/clocks.h"

// Function to initialize the PIO state machine for the ws2812 program
static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {

    // Initialize the GPIO pin for PIO control
    pio_gpio_init(pio, pin);
    // Set the pin direction to output
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Get the default PIO state machine configuration for this program
    // ws2812_program_get_default_config(offset) is automatically generated by pioasm
    pio_sm_config c = ws2812_program_get_default_config(offset);
    
    // Configure side-set pin
    sm_config_set_sideset_pins(&c, pin);
    
    // Configure output shift register (OSR):
    // - Shift out to the right (false for first arg)
    // - Autopull is enabled (true for second arg)
    // - Pull threshold is 24 bits for RGB, 32 for RGBW
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24);
    
    // Configure FIFO join: join TX FIFO (CPU writes to TX FIFO)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Calculate clock divider:
    // The PIO program uses (T1 + T2 + T3) cycles per bit.
    // These constants (ws2812_T1, ws2812_T2, ws2812_T3) are automatically
    // made available by pioasm from the .define directives in the PIO code.
    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    // Initialize the state machine with this configuration
    pio_sm_init(pio, sm, offset, &c);
    // Enable the state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}
